<story-context id="story-2.2-context" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.2</storyId>
    <title>Dose-response Analysis</title>
    <status>Draft</status>
    <generatedAt>2025-10-17</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-2.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user</asA>
    <iWant>to see if symptom severity correlates with food quantity consumed</iWant>
    <soThat>I can determine if portion size matters for my triggers</soThat>
    <tasks>
      - Task 1: Implement DoseResponseService core logic (AC 1, 2, 3)
      - Task 2: Integrate with CorrelationOrchestrationService (AC 1, 4)
      - Task 3: Add dose-response visualization component (AC 4)
      - Task 4: Update API routes to return dose-response data (AC 4)
      - Task 5: Validation and testing (AC 1, 2, 3, 4)
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">System analyzes relationship between portion size and symptom severity</criterion>
    <criterion id="2">Results show if larger portions correlate with more severe symptoms</criterion>
    <criterion id="3">Only analyzed when sufficient quantity data logged (minimum 5 events)</criterion>
    <criterion id="4">Dose-response findings displayed with correlation insights</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec-epic-E2.md</path>
        <title>Technical Specification: Food-Symptom Correlation Analysis</title>
        <section>Detailed Design - Services and Modules</section>
        <snippet>DoseResponseService module responsible for performing regression across portion size vs symptom severity to establish dose-response relationships. Input: normalized portion/severity arrays; Output: DoseResponseSummary. Uses simple linear regression (least squares) for portion vs severity relationship.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-E2.md</path>
        <title>Technical Specification: Food-Symptom Correlation Analysis</title>
        <section>Acceptance Criteria</section>
        <snippet>AC5: Dose-response module visualizes severity vs portion size using line charts, including confidence messaging when r-squared &lt; 0.4 (FR009, FR019).</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.2: Dose-Response Analysis</section>
        <snippet>Portion size encoding: Small=1, Medium=2, Large=3. Use regression analysis for dose-response relationship. Display confidence based on sample size. Minimum 5 events with portion data required.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR009</section>
        <snippet>System evaluates dose-response relationships based on quantity consumed, analyzing if symptom severity correlates with food portion size.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR003</section>
        <snippet>Correlation Accuracy - Time-based correlation analysis must achieve statistical significance threshold (p &lt; 0.05) before displaying correlations to users, with clear confidence indicators.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture Document</title>
        <section>Database Schema - FoodCorrelation Model</section>
        <snippet>FoodCorrelation.doseResponse JSON field stores dose-response summary data including regression metrics and confidence levels per portion size.</snippet>
      </doc>
      <doc>
        <path>docs/architecture-decisions.md</path>
        <title>Architecture Decision Records</title>
        <section>ADR-008: Statistical Correlation Methods</section>
        <snippet>Chi-Square Test (Categorical) + Pearson Correlation (Quantitative) chosen for food-symptom correlation and dose-response analysis. Industry-standard methods with p-value calculation. Requires minimum sample size (3-5 occurrences).</snippet>
      </doc>
      <doc>
        <path>AGENTS.md</path>
        <title>Project-Specific Patterns</title>
        <section>Performance Considerations</section>
        <snippet>Analytics Caching: Expensive computations cached in analysisResults table (24h TTL). Database Queries: Always use indexed fields first, then filter in memory.</snippet>
      </doc>
    </docs>

    <code>
      <artifact>
        <path>src/lib/utils/statistics/linearRegression.ts</path>
        <kind>utility</kind>
        <symbol>computeLinearRegression</symbol>
        <lines>1-220</lines>
        <reason>REUSABLE - Existing linear regression implementation using least squares method. Returns slope, intercept, and r-squared. Includes validation and outlier removal. Perfect for dose-response analysis.</reason>
      </artifact>
      <artifact>
        <path>src/lib/services/correlation/CorrelationOrchestrationService.ts</path>
        <kind>service</kind>
        <symbol>CorrelationOrchestrationService</symbol>
        <lines>1-132</lines>
        <reason>EXTEND - Orchestrates correlation computation by hydrating data from repositories. Need to add DoseResponseService invocation when portion data is available.</reason>
      </artifact>
      <artifact>
        <path>src/lib/services/correlation/CorrelationService.ts</path>
        <kind>service</kind>
        <symbol>CorrelationService</symbol>
        <lines>1-187</lines>
        <reason>REFERENCE - Pure correlation computation layer. Shows pattern for statistical analysis services. DoseResponseService should follow similar design (pure, testable).</reason>
      </artifact>
      <artifact>
        <path>src/components/analytics/TrendChart.tsx</path>
        <kind>component</kind>
        <symbol>TrendChart</symbol>
        <lines>1-205</lines>
        <reason>REUSABLE - Existing Chart.js Line chart component with regression visualization. Shows pattern for chart configuration, accessibility, and annotations. Can guide DoseResponseChart implementation.</reason>
      </artifact>
      <artifact>
        <path>src/components/analytics/TrendInterpretation.tsx</path>
        <kind>component</kind>
        <symbol>TrendInterpretation</symbol>
        <lines>1-100</lines>
        <reason>REUSABLE - Shows pattern for confidence messaging (very-high, high, moderate, low) with color coding and accessible status indicators. Use for r-squared confidence display.</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/foodEventRepository.ts</path>
        <kind>repository</kind>
        <symbol>foodEventRepository</symbol>
        <lines>N/A</lines>
        <reason>DEPENDENCY - Provides food event data with portion sizes (portionMap field). Need to parse JSON to extract portion data for dose-response analysis.</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/symptomInstanceRepository.ts</path>
        <kind>repository</kind>
        <symbol>symptomInstanceRepository</symbol>
        <lines>N/A</lines>
        <reason>DEPENDENCY - Provides symptom instance data with severity ratings (1-10 scale). Essential for correlation with portion sizes.</reason>
      </artifact>
      <artifact>
        <path>src/lib/db/schema.ts</path>
        <kind>schema</kind>
        <symbol>FoodEventRecord</symbol>
        <lines>N/A</lines>
        <reason>REFERENCE - FoodEventRecord.portionMap field (JSON string) stores portion sizes per food. Parse as JSON object mapping foodId → portionSize string.</reason>
      </artifact>
    </code>

    <dependencies>
      <node>
        <package name="chart.js" version="^4.4.0" usage="Line charts for dose-response visualization" />
        <package name="react-chartjs-2" version="^5.2.0" usage="React wrapper for Chart.js" />
        <package name="chartjs-plugin-annotation" version="^3.0.1" usage="Regression line overlay on charts" />
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Portion size encoding: Small=1, Medium=2, Large=3 (standardized across app)</constraint>
    <constraint>Minimum sample size: 5 events with portion data required before dose-response analysis</constraint>
    <constraint>Statistical threshold: r-squared &lt; 0.4 triggers "Low confidence" message</constraint>
    <constraint>Confidence messaging: "Insufficient data" when n &lt; 5, "Low confidence" when r² &lt; 0.4</constraint>
    <constraint>Use simple linear regression (least squares method) - reuse existing linearRegression.ts utility</constraint>
    <constraint>Store results in FoodCorrelation.doseResponse JSON field (Prisma model)</constraint>
    <constraint>Charts must meet WCAG 2.1 Level AA accessibility standards (aria labels, keyboard nav)</constraint>
    <constraint>Computation should be cacheable (expensive operation, 24h TTL per AGENTS.md)</constraint>
    <constraint>DoseResponseService should be pure/testable (no direct DB access - follow CorrelationService pattern)</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>DoseResponseService.computeDoseResponse</name>
      <kind>service method</kind>
      <signature>computeDoseResponse(portionSizes: number[], severityScores: number[]): DoseResponseResult</signature>
      <path>src/lib/services/food/DoseResponseService.ts</path>
      <description>Core dose-response analysis method. Takes arrays of portion sizes (1-3) and symptom severity scores (1-10), returns regression metrics (slope, intercept, r-squared) and confidence level.</description>
    </interface>
    <interface>
      <name>DoseResponseResult</name>
      <kind>interface</kind>
      <signature>{ slope: number; intercept: number; rSquared: number; confidence: 'high' | 'medium' | 'low' | 'insufficient'; sampleSize: number; portionSeverityPairs: Array&lt;{portion: number, severity: number}&gt; }</signature>
      <path>src/lib/services/food/DoseResponseService.ts</path>
      <description>Result object from dose-response analysis containing regression metrics and raw data for visualization.</description>
    </interface>
    <interface>
      <name>DoseResponseChart</name>
      <kind>React component</kind>
      <signature>&lt;DoseResponseChart data={DoseResponseResult} foodName={string} symptomName={string} /&gt;</signature>
      <path>src/components/food/DoseResponseChart.tsx</path>
      <description>Chart.js Line chart component displaying portion size (x-axis) vs symptom severity (y-axis) with regression line overlay. Shows r-squared value and confidence messaging.</description>
    </interface>
    <interface>
      <name>CorrelationResult.doseResponse</name>
      <kind>property</kind>
      <signature>doseResponse?: DoseResponseResult</signature>
      <path>src/lib/services/correlation/CorrelationOrchestrationService.ts</path>
      <description>Optional dose-response field added to CorrelationResult when portion data is available and minimum sample size met.</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Jest testing framework with React Testing Library for components. Unit tests for services/utilities using synthetic datasets with known outcomes. Integration tests verify data flow from repositories through services to API. Accessibility tests using jest-axe for chart components (WCAG 2.1 AA compliance). Snapshot tests for chart rendering consistency. 80% coverage minimum across branches, functions, lines, statements (per AGENTS.md).
    </standards>
    
    <locations>
      - src/lib/services/food/__tests__/DoseResponseService.test.ts
      - src/components/food/__tests__/DoseResponseChart.test.tsx
      - src/lib/services/correlation/__tests__/CorrelationOrchestrationService.test.ts (extend existing)
    </locations>
    
    <ideas>
      <test ac="1" desc="DoseResponseService computes correct regression for known linear relationship">
        Given: portion sizes [1, 2, 3] and severities [2, 4, 6] (perfect linear: y=2x)
        When: computeDoseResponse called
        Then: slope=2, intercept=0, r-squared≈1.0, confidence='high'
      </test>
      
      <test ac="1,2" desc="DoseResponseService detects positive correlation (larger portions → worse symptoms)">
        Given: portions [1, 1, 2, 2, 3, 3] and severities [2, 3, 5, 4, 8, 7]
        When: computeDoseResponse called
        Then: slope &gt; 0, r-squared &gt; 0.7, confidence='high'
      </test>
      
      <test ac="1,2" desc="DoseResponseService detects negative correlation (larger portions → better symptoms)">
        Given: portions [1, 2, 3] and severities [8, 5, 2]
        When: computeDoseResponse called
        Then: slope &lt; 0 (negative correlation detected)
      </test>
      
      <test ac="1,2" desc="DoseResponseService detects no correlation (flat line)">
        Given: portions [1, 2, 3, 1, 2, 3] and severities [5, 5, 5, 5, 5, 5]
        When: computeDoseResponse called
        Then: slope≈0, r-squared≈0, indicates no dose-response relationship
      </test>
      
      <test ac="3" desc="DoseResponseService rejects analysis when sample size &lt; 5">
        Given: portions [1, 2, 3] and severities [2, 4, 6] (only 3 events)
        When: computeDoseResponse called
        Then: returns confidence='insufficient', message="Minimum 5 events required"
      </test>
      
      <test ac="3" desc="DoseResponseService accepts analysis when sample size ≥ 5">
        Given: 5 portion-severity pairs
        When: computeDoseResponse called
        Then: performs regression and returns valid result
      </test>
      
      <test ac="1" desc="DoseResponseService handles outliers gracefully">
        Given: portions [1, 2, 3, 1, 2] and severities [2, 4, 6, 1, 50] (outlier: 50)
        When: computeDoseResponse called
        Then: r-squared reduced but analysis completes without error
      </test>
      
      <test ac="2" desc="CorrelationOrchestrationService invokes DoseResponseService when portion data available">
        Given: food events with portionMap data and symptom instances with severity
        When: computeCorrelation called
        Then: result includes doseResponse field with regression metrics
      </test>
      
      <test ac="2" desc="CorrelationOrchestrationService skips dose-response when no portion data">
        Given: food events without portionMap data
        When: computeCorrelation called
        Then: result.doseResponse is undefined (graceful skip)
      </test>
      
      <test ac="4" desc="DoseResponseChart renders line chart with regression line">
        Given: DoseResponseResult with slope=2, intercept=1, r-squared=0.85
        When: component renders
        Then: Chart.js Line chart displayed with scatter points and regression line overlay
      </test>
      
      <test ac="4" desc="DoseResponseChart displays r-squared value prominently">
        Given: DoseResponseResult with r-squared=0.72
        When: component renders
        Then: r-squared value displayed as "R² = 0.72" with appropriate confidence label
      </test>
      
      <test ac="4" desc="DoseResponseChart shows low confidence message when r-squared &lt; 0.4">
        Given: DoseResponseResult with r-squared=0.35
        When: component renders
        Then: "Low confidence" badge/message displayed, chart still rendered but with warning
      </test>
      
      <test ac="4" desc="DoseResponseChart shows insufficient data message when n &lt; 5">
        Given: DoseResponseResult with confidence='insufficient'
        When: component renders
        Then: "Insufficient data (minimum 5 events required)" message displayed, no chart
      </test>
      
      <test ac="4" desc="DoseResponseChart meets accessibility standards">
        Given: DoseResponseChart component
        When: jest-axe runs
        Then: no accessibility violations (WCAG 2.1 AA), aria labels present, keyboard navigable
      </test>
      
      <test ac="4" desc="API route returns doseResponse field in correlation result">
        Given: GET /api/correlation/food/[foodId] with dose-response data
        When: request made
        Then: response includes doseResponse: { slope, intercept, rSquared, confidence, sampleSize }
      </test>
      
      <test ac="1,2,3,4" desc="End-to-end: dose-response analysis from food events to UI">
        Given: 6 food events with portions [1, 2, 3, 1, 2, 3] and 6 symptoms with severities [2, 4, 7, 3, 5, 8]
        When: correlation job runs and UI fetches results
        Then: DoseResponseChart displays positive correlation with regression line, r-squared &gt; 0.7, confidence='high'
      </test>
    </ideas>
  </tests>
</story-context>
