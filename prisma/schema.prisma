// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  emailVerified     DateTime?
  password          String
  name              String?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  conditions        AutoimmuneCondition[]
  symptomLogs       SymptomLog[]
  medicationLogs    MedicationLog[]
  medications       Medication[]
  journalEntries    JournalEntry[]
  reminders         Reminder[]
  customSymptoms    CustomSymptom[]
  triggerLogs       TriggerLog[]
  triggers          Trigger[]
  photos            Photo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AutoimmuneCondition {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  symptomLogs SymptomLog[]
  triggers    Trigger[]
}

model SymptomLog {
  id                     String      @id @default(cuid())
  userId                 String
  conditionId            String?
  date                   DateTime
  painLevel              Int?        @db.SmallInt
  fatigueLevel           Int?        @db.SmallInt
  inflammationLevel      Int?        @db.SmallInt
  moodLevel              Int?        @db.SmallInt
  sleepQuality           Int?        @db.SmallInt
  temperature            Float?
  weight                 Float?
  customSymptomEntries   CustomSymptomEntry[]
  triggerLogs            TriggerLog[]
  notes                  String?     @db.Text
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  condition              AutoimmuneCondition? @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  medicationLogs         MedicationLog[]
  photos                 Photo[]
}

model Medication {
  id          String           @id @default(cuid())
  userId      String
  name        String
  dosage      String
  frequency   String
  instructions String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        MedicationLog[]
  reminders   Reminder[]
}

model MedicationLog {
  id            String       @id @default(cuid())
  userId        String
  medicationId  String
  symptomLogId  String?
  takenAt       DateTime
  dosage        String?
  notes         String?      @db.Text
  adherence     Boolean?

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  medication    Medication   @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  symptomLog    SymptomLog?  @relation(fields: [symptomLogId], references: [id], onDelete: Cascade)
}

model Trigger {
  id            String       @id @default(cuid())
  userId        String
  conditionId   String?
  category      TriggerCategory
  name          String
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  condition     AutoimmuneCondition? @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  triggerLogs   TriggerLog[]
}

model TriggerLog {
  id            String      @id @default(cuid())
  userId        String
  triggerId     String
  symptomLogId  String?
  exposureLevel Int?        @db.SmallInt
  occurredAt    DateTime
  notes         String?     @db.Text

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trigger       Trigger     @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  symptomLog    SymptomLog? @relation(fields: [symptomLogId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  title       String?
  content     String   @db.Text
  mood        Int?     @db.SmallInt
  energyLevel Int?     @db.SmallInt
  stressLevel Int?     @db.SmallInt
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomSymptom {
  id            String                @id @default(cuid())
  userId        String
  name          String
  description   String?
  unit          String?
  minValue      Int?
  maxValue      Int?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries       CustomSymptomEntry[]
}

model CustomSymptomEntry {
  id              String        @id @default(cuid())
  symptomId       String
  symptomLogId    String
  value           Float
  notes           String?       @db.Text

  symptom         CustomSymptom @relation(fields: [symptomId], references: [id], onDelete: Cascade)
  symptomLog      SymptomLog    @relation(fields: [symptomLogId], references: [id], onDelete: Cascade)
}

model Photo {
  id          String   @id @default(cuid())
  userId      String
  symptomLogId String?
  url         String
  caption     String?
  takenAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  symptomLog  SymptomLog? @relation(fields: [symptomLogId], references: [id], onDelete: Cascade)
}

model Reminder {
  id            String    @id @default(cuid())
  userId        String
  medicationId  String?
  title         String
  description   String?
  scheduleCron  String
  nextRunAt     DateTime?
  lastSentAt    DateTime?
  enabled       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  medication    Medication? @relation(fields: [medicationId], references: [id], onDelete: Cascade)
}

enum TriggerCategory {
  FOOD
  WEATHER
  STRESS
  SLEEP
  EXERCISE
  ENVIRONMENT
  OTHER
}
