<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.5</storyId>
    <title>Display Flare Markers on Body Map</title>
    <status>Ready</status>
    <generatedAt>2025-10-20</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-1.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user with active or historical flares</asA>
    <iWant>to see visual markers on the body map showing where my flares are located</iWant>
    <soThat>I can quickly understand my flare distribution</soThat>
    <tasks>
- [ ] Create FlareMarkers component (AC: 1.1, 1.2, 1.4, 1.7)
- [ ] Implement status-based styling (AC: 1.2)
- [ ] Handle multiple flares in same region (AC: 1.3)
- [ ] Add marker interactivity (AC: 1.5)
- [ ] Implement real-time reactivity (AC: 1.6)
- [ ] Integrate with zoom/pan (AC: 1.7)
- [ ] Testing and integration (AC: All)
    </tasks>
  </story>

  <acceptanceCriteria>
AC1.1: Active flares display as colored markers on the body map at their body region locations
AC1.2: Marker color/icon indicates flare status: Active (red), Improving (yellow), Worsening (orange), Resolved (gray)
AC1.3: Multiple flares in the same region display without overlap (slight position offset if needed)
AC1.4: Marker size is touch-friendly (minimum 44x44px touch target per NFR001)
AC1.5: Tapping a marker opens the flare detail view (navigation to flare page)
AC1.6: Markers update in real-time when flare status changes (reactive to data changes)
AC1.7: Markers scale appropriately with zoom level (remain visible and touch-friendly when zoomed)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <artifact>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Functional Requirements</section>
        <snippet>FR001: System shall include groin-specific regions on all body map views. FR002: System shall provide zoom functionality for all body map regions. FR004: System shall display existing flare markers on the body map with visual indicators for flare status (active, improving, worsening, resolved).</snippet>
      </artifact>
      <artifact>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>Non-Functional Requirements</section>
        <snippet>NFR001: Body map zoom and pan interactions shall respond within 100ms to maintain smooth user experience on mobile and desktop devices. Marker rendering for 20+ flares must complete within 100ms.</snippet>
      </artifact>
      <artifact>
        <path>docs/epics.md</path>
        <title>Epic Breakdown</title>
        <section>Epic 1: Enhanced Body Map with Precision Location Tracking</section>
        <snippet>Story 1.5: Display Flare Markers on Body Map. User wants to see visual markers showing flare locations with status-based color coding (Active-red, Improving-yellow, Worsening-orange, Resolved-gray). Prerequisites: Stories 1.1, 1.2, 1.3 complete. Multiple flares in same region display without overlap. Touch-friendly 44x44px targets.</snippet>
      </artifact>
      <artifact>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Component Architecture - Epic 1 Mapping</section>
        <snippet>FlareMarkers component renders as SVG overlay inside TransformComponent. Uses bodyMapService for region metadata. React Query + Dexie live queries for real-time marker updates. Performance target: <100ms for 20+ flares (NFR001).</snippet>
      </artifact>
      <artifact>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>ADR-001: Body Map Zoom/Pan Library</section>
        <snippet>Decision: Use react-zoom-pan-pinch@3.6.1 for zoom/pan functionality. Rationale: Mature library, touch-optimized, minimal bundle size. FlareMarkers must integrate inside TransformComponent to stay aligned during zoom/pan.</snippet>
      </artifact>
      <artifact>
        <path>docs/stories/story-1.1.md</path>
        <title>Story 1.1: Add Groin Regions to Body Map SVG</title>
        <section>Status: Complete</section>
        <snippet>Replaced single groin region with 3 separate regions (left-groin, center-groin, right-groin). FlareMarkers must display on groin regions. Groin regions use ellipse SVG elements positioned below lower abdomen.</snippet>
      </artifact>
      <artifact>
        <path>docs/stories/story-1.2.md</path>
        <title>Story 1.2: Implement Zoom Controls for Body Map</title>
        <section>Status: Complete</section>
        <snippet>BodyMapZoom wrapper using react-zoom-pan-pinch library. Zoom range 1x-3x. FlareMarkers must scale inversely with zoom (stay same screen size). Markers must remain touch-friendly at all zoom levels.</snippet>
      </artifact>
      <artifact>
        <path>docs/stories/story-1.3.md</path>
        <title>Story 1.3: Implement Pan Controls for Zoomed Body Map</title>
        <section>Status: Complete</section>
        <snippet>Pan controls added to BodyMapZoom. limitToBounds=true constrains panning. FlareMarkers must stay aligned with body regions during pan. Click vs drag distinction ensures markers don't navigate on pan.</snippet>
      </artifact>
    </docs>
    <code>
      <artifact>
        <path>src/lib/db/schema.ts</path>
        <kind>schema</kind>
        <symbol>FlareRecord</symbol>
        <lines>276-307</lines>
        <reason>FlareRecord interface defines flare data structure. Key fields: bodyRegionId (primary region), bodyRegions (array), severity (1-10), severityHistory (array), status ('active'|'improving'|'worsening'|'resolved'), interventions (array). FlareMarkers must use this interface.</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/flareRepository.ts</path>
        <kind>repository</kind>
        <symbol>flareRepository</symbol>
        <lines>1-241</lines>
        <reason>Provides data access methods. Key methods: getActiveFlares(userId), getActiveFlaresWithTrend(userId). FlareMarkers should use getActiveFlaresWithTrend for real-time updates with status indicators.</reason>
      </artifact>
      <artifact>
        <path>src/lib/data/bodyRegions.ts</path>
        <kind>data</kind>
        <symbol>FRONT_BODY_REGIONS, BACK_BODY_REGIONS, getRegionsForView</symbol>
        <lines>1-135</lines>
        <reason>Body region metadata. Each region needs center coordinates added for marker positioning. Groin regions (left-groin, center-groin, right-groin) from Story 1.1 must support markers.</reason>
      </artifact>
      <artifact>
        <path>src/components/body-map/BodyMapZoom.tsx</path>
        <kind>component</kind>
        <symbol>BodyMapZoom</symbol>
        <lines>1-125</lines>
        <reason>Zoom/pan wrapper from Stories 1.2/1.3. FlareMarkers must render inside TransformComponent to stay aligned during zoom/pan. Provides zoomLevel via onZoomChange callback. Uses react-zoom-pan-pinch library.</reason>
      </artifact>
      <artifact>
        <path>src/components/body-mapping/BodyMapViewer.tsx</path>
        <kind>component</kind>
        <symbol>BodyMapViewer</symbol>
        <lines>1-50</lines>
        <reason>Top-level body map component. BodyMapZoom wraps BodyRegionSelector. FlareMarkers integration point - add inside BodyMapZoom after children.</reason>
      </artifact>
      <artifact>
        <path>src/lib/types/flare.ts</path>
        <kind>type</kind>
        <symbol>ActiveFlare</symbol>
        <lines>1-40</lines>
        <reason>Legacy flare type. Consider using FlareRecord from schema.ts instead for consistency with database structure and new severity tracking features.</reason>
      </artifact>
      <artifact>
        <path>src/components/body-mapping/bodies/FrontBody.tsx</path>
        <kind>component</kind>
        <symbol>FrontBody</symbol>
        <lines>1-200</lines>
        <reason>Front body SVG component with groin regions from Story 1.1. SVG viewBox and coordinate system. FlareMarkers must use same coordinate space. Groin ellipses positioned below abdomen.</reason>
      </artifact>
    </code>
    <dependencies>
      <runtime>
        <package name="react" version="19.1.0" />
        <package name="react-dom" version="19.1.0" />
        <package name="next" version="15.5.4" />
        <package name="react-zoom-pan-pinch" version="3.6.1" purpose="Zoom/pan library - FlareMarkers renders inside TransformComponent" />
        <package name="dexie" version="4.2.0" purpose="IndexedDB wrapper for flare data access and live queries" />
        <package name="lucide-react" version="0.544.0" purpose="Icon library (if needed for marker icons)" />
      </runtime>
      <development>
        <package name="typescript" version="5.x" />
        <package name="jest" version="30.2.0" />
        <package name="@testing-library/react" version="16.3.0" />
        <package name="@testing-library/jest-dom" version="6.9.1" />
        <package name="@testing-library/user-event" version="14.6.1" />
        <package name="fake-indexeddb" version="6.2.4" purpose="Mock IndexedDB for testing" />
      </development>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>Story 1.4 (Coordinate Marking) NOT implemented - use region center positioning, not precise coordinates. bodyRegionId field available, coordinates field may be undefined.</constraint>
    <constraint>FlareMarkers MUST render inside TransformComponent (from BodyMapZoom) to stay aligned during zoom/pan operations from Stories 1.2 and 1.3.</constraint>
    <constraint>Marker size must scale inversely with zoom level (radius = baseRadius / sqrt(zoomLevel)) to maintain consistent screen size and touch-friendliness.</constraint>
    <constraint>Performance: Marker rendering for 20+ flares must complete within 100ms (NFR001). Use React.memo, useMemo for optimization.</constraint>
    <constraint>Touch targets: Minimum 44x44px at all zoom levels for mobile accessibility. Validate with screen coordinates, not SVG coordinates.</constraint>
    <constraint>Groin regions (left-groin, center-groin, right-groin) from Story 1.1 MUST support flare markers - critical for HS symptom tracking.</constraint>
    <constraint>Click vs drag: Library (react-zoom-pan-pinch) handles drag distance threshold. Marker onClick only fires on tap, not drag. No custom logic needed.</constraint>
    <constraint>Region center coordinates: bodyRegions.ts may not have center coordinates yet. Must add center: {x, y} for each region or calculate from SVG paths.</constraint>
    <constraint>Real-time updates: Use React Query with Dexie live queries. Avoid excessive re-renders - debounce if needed for performance.</constraint>
    <constraint>Status-based colors: Active (red-500), Improving (yellow-400), Worsening (orange-500), Resolved (gray-400). Must meet WCAG AA contrast against SVG background.</constraint>
    <constraint>Multiple flares in same region: Use radial offset algorithm (20px radius) to prevent overlap. Position offsets in circular pattern around region center.</constraint>
    <constraint>SVG coordinate system: Existing body map uses specific viewBox (likely 0 0 800 1200 based on architecture). Marker coordinates must be in same space.</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>FlareRecord (from schema.ts)</name>
      <kind>Database Schema Interface</kind>
      <signature>
interface FlareRecord {
  id: string;
  userId: string;
  symptomId: string;
  symptomName: string;
  bodyRegionId: string;
  bodyRegions: string[];
  startDate: Date;
  endDate?: Date;
  severity: number;
  severityHistory: Array<{timestamp: number; severity: number; status: string}>;
  interventions: Array<{timestamp: number; type: string; notes?: string}>;
  status: "active" | "improving" | "worsening" | "resolved";
  notes: string;
  resolutionNotes?: string;
  photoIds: string[];
  createdAt: Date;
  updatedAt: Date;
}
      </signature>
      <path>src/lib/db/schema.ts</path>
    </interface>
    <interface>
      <name>BodyRegion</name>
      <kind>Type Interface</kind>
      <signature>
interface BodyRegion {
  id: string;
  name: string;
  category: string;
  side: 'left' | 'right' | 'center';
  svgPath: string;
  selectable: boolean;
  zIndex: number;
  commonSymptoms?: string[];
  center?: {x: number; y: number}; // May need to add this
}
      </signature>
      <path>src/lib/types/body-mapping.ts</path>
    </interface>
    <interface>
      <name>flareRepository API</name>
      <kind>Repository Interface</kind>
      <signature>
{
  getActiveFlares(userId: string): Promise<ActiveFlare[]>
  getActiveFlaresWithTrend(userId: string): Promise<Array<ActiveFlare & {trend: 'worsening'|'stable'|'improving'}>>
  getById(id: string): Promise<ActiveFlare | undefined>
}
      </signature>
      <path>src/lib/repositories/flareRepository.ts</path>
    </interface>
    <interface>
      <name>TransformComponent (react-zoom-pan-pinch)</name>
      <kind>Library Component</kind>
      <signature>
<TransformComponent
  wrapperClass="string"
  contentClass="string"
  wrapperStyle={{width, height}}
>
  {children}
</TransformComponent>
      </signature>
      <path>node_modules/react-zoom-pan-pinch</path>
    </interface>
    <interface>
      <name>useRouter (Next.js)</name>
      <kind>Hook</kind>
      <signature>
const router = useRouter();
router.push(path: string): void
      </signature>
      <path>next/navigation</path>
    </interface>
  </interfaces>
  <tests>
    <standards>Testing framework: Jest 30.2.0 with React Testing Library 16.3.0. Component tests use @testing-library/react with @testing-library/jest-dom matchers. Integration tests use fake-indexeddb for mocking Dexie/IndexedDB. All tests must be in __tests__ directories or .test.tsx files. Test coverage expectations: Unit tests for components and utilities, integration tests for BodyMapViewer with FlareMarkers, performance tests to validate NFR001 (<100ms for 20+ markers). Use data-testid attributes for test selectors. Mock flareRepository and useRouter for component tests.</standards>
    <locations>
      <location>src/components/body-map/__tests__/FlareMarkers.test.tsx</location>
      <location>src/lib/utils/__tests__/flareMarkers.test.ts</location>
      <location>src/__tests__/integration/body-map-flare-markers.test.tsx</location>
    </locations>
    <ideas>
      <idea ac="AC1.1">Test: FlareMarkers renders correct number of markers for active flares. Mock flareRepository.getActiveFlaresWithTrend to return 3 flares with different bodyRegionIds. Verify 3 circle elements rendered with data-testid="flare-marker-{id}".</idea>
      <idea ac="AC1.2">Test: Markers display correct colors based on status. Create flares with status: active, improving, worsening, resolved. Verify circle elements have classes: fill-red-500, fill-yellow-400, fill-orange-500, fill-gray-400.</idea>
      <idea ac="AC1.2">Test: getFlareMarkerColor utility returns correct color classes for each status value. Unit test with all 4 status values.</idea>
      <idea ac="AC1.3">Test: Multiple flares in same region offset correctly. Create 3 flares with same bodyRegionId. Verify each marker has different cx/cy coordinates (radial offset pattern).</idea>
      <idea ac="AC1.3">Test: calculateMarkerPositions utility correctly offsets multiple markers. Unit test with 1, 2, 3, 4 flares in same region.</idea>
      <idea ac="AC1.4">Test: Marker radius meets minimum touch target. Calculate screen-space size (radius * 2 in pixels) and verify >= 44px at zoom levels 1x, 2x, 3x.</idea>
      <idea ac="AC1.5">Test: Clicking marker navigates to flare detail page. Mock useRouter, click marker, verify router.push called with '/flares/{id}'.</idea>
      <idea ac="AC1.5">Test: Marker has proper ARIA label and role="button" for accessibility.</idea>
      <idea ac="AC1.6">Test: Markers update when flare data changes. Initial render with 2 flares, update mock data to 3 flares, verify re-render shows 3 markers.</idea>
      <idea ac="AC1.7">Test: Marker size scales inversely with zoom level. Verify marker radius at zoom 1x = 8, zoom 2x ≈ 5.66, zoom 3x ≈ 4.62 (radius = 8 / sqrt(zoom)).</idea>
      <idea ac="AC1.7">Integration test: FlareMarkers integrated with BodyMapZoom. Render BodyMapViewer with FlareMarkers, simulate zoom in, verify markers still visible and properly positioned.</idea>
      <idea ac="All">Integration test: Groin region flares from Story 1.1 display markers correctly. Create flares for left-groin, center-groin, right-groin, verify all markers render on front view.</idea>
      <idea ac="NFR001">Performance test: Rendering 20+ markers completes in <100ms. Create 25 flares, measure render time using performance.now(), assert < 100ms.</idea>
    </ideas>
  </tests>
</story-context>
