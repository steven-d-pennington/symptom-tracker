<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.2</storyId>
    <title>Active Flare Cards Component</title>
    <status>Ready</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>C:\projects\symptom-tracker\docs\stories\story-2.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user managing active flares</asA>
    <iWant>to see all active flares prominently displayed with quick actions</iWant>
    <soThat>I can easily update severity and resolve flares as they heal</soThat>
    <tasks>
      <task id="1" complete="false">
        <description>Create ActiveFlareCards component (AC: 1,2,4)</description>
        <subtasks>
          <subtask>Set up component file `src/components/flares/ActiveFlareCards.tsx`</subtask>
          <subtask>Query active flares using `flareRepository.getActiveFlaresWithTrend()`</subtask>
          <subtask>Render flare cards with body location, duration, severity, trend arrow</subtask>
          <subtask>Implement empty state component</subtask>
        </subtasks>
      </task>
      <task id="2" complete="false">
        <description>Calculate and display flare metrics (AC: 2,5,6)</description>
        <subtasks>
          <subtask>Calculate duration: `Math.floor((Date.now() - flare.startDate) / (1000 * 60 * 60 * 24)) + 1` days</subtask>
          <subtask>Display trend arrows: ↑ worsening (red), → stable (yellow), ↓ improving (green)</subtask>
          <subtask>Format severity as "X/10"</subtask>
        </subtasks>
      </task>
      <task id="3" complete="false">
        <description>Implement quick actions (AC: 3,7,8)</description>
        <subtasks>
          <subtask>Add [Update] button that opens FlareUpdateModal</subtask>
          <subtask>Add [Resolve] button with confirmation dialog</subtask>
          <subtask>Pass flare data to modals when opened</subtask>
          <subtask>Implement resolve handler that calls `flareRepository.resolve()`</subtask>
        </subtasks>
      </task>
      <task id="4" complete="false">
        <description>Add sorting functionality (AC: 9)</description>
        <subtasks>
          <subtask>Implement sort by severity (highest first)</subtask>
          <subtask>Implement sort by recency (newest first)</subtask>
          <subtask>Add sort toggle UI</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Displays 0-5 active flare cards at top of home screen</criterion>
    <criterion id="2">Each card shows: body location, duration (days since onset), current severity (X/10), trend arrow (↑↓→)</criterion>
    <criterion id="3">Quick action buttons on each card: [Update] [Resolve]</criterion>
    <criterion id="4">Empty state when no active flares: "No active flares right now" with encouraging message</criterion>
    <criterion id="5">Trend arrows calculated from severityHistory: ↑ worsening (red), → stable (yellow), ↓ improving (green)</criterion>
    <criterion id="6">Duration shows "Day 1", "Day 3", etc. based on startDate to now</criterion>
    <criterion id="7">Tap [Update] opens FlareUpdateModal pre-filled with current flare data</criterion>
    <criterion id="8">Tap [Resolve] shows confirmation dialog, then resolves flare (removes from active display)</criterion>
    <criterion id="9">Cards sortable by severity (highest first) or recency (newest first)</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRODUCT/event-stream-redesign-epics.md</path>
        <title>Event Stream Redesign Epics</title>
        <section>Story 2.2: Active Flare Cards Component</section>
        <snippet>
          Story defines comprehensive requirements for ActiveFlareCards component including:
          - Display 0-5 active flare cards with body location, duration, severity, trend arrows
          - Quick actions: [Update] [Resolve] buttons
          - Empty state handling
          - Trend calculation from severityHistory (↑↓→ indicators)
          - Sorting by severity or recency
          Technical approach: Use flareRepository.getActiveFlaresWithTrend() from Story 1.4
        </snippet>
      </doc>
      <doc>
        <path>docs/event-stream-redesign-spec.md</path>
        <title>Event Stream Redesign Technical Specification</title>
        <section>Component Architecture - ActiveFlareCards</section>
        <snippet>
          Component specification for ActiveFlareCards:
          - Location: src/components/flares/ActiveFlareCards.tsx
          - Purpose: Display all active flares with quick update/resolve actions
          - Features: Grid of flare cards, empty state, flare stats summary, filtering by status, sorting
          - Each card shows: symptom name, severity, status badge, body regions, interventions, photos, update button
          - Query pattern: flareRepository.getActiveFlaresWithTrend()
        </snippet>
      </doc>
      <doc>
        <path>docs/DEVELOPMENT/component-library.md</path>
        <title>Component Library Reference</title>
        <section>Flare Components - ActiveFlareDashboard &amp; FlareCard</section>
        <snippet>
          Existing components:
          - ActiveFlareDashboard: Dashboard showing all active flares, grid of FlareCard components, filter/sort
          - FlareCard: Individual flare display card with symptom name, severity (1-10), status badge, body regions, interventions, photos, quick action buttons
          - Design patterns: Card-based layout, color-coded status badges, visual severity indicators
          Component location: src/components/flare/
        </snippet>
      </doc>
      <doc>
        <path>docs/PRODUCT/ux-specification.md</path>
        <title>UX/UI Specification</title>
        <section>Component Library - Dashboard &amp; Card Components</section>
        <snippet>
          Design system for cards and dashboards:
          - Dashboard grid: Responsive (12-col desktop, 8-col tablet, 1-col mobile)
          - Card variants: small (1x1), medium (2x1), large (2x2), full-width
          - Status colors: active (yellow), improving (green), worsening (red), resolved (blue)
          - Typography: Inter font, semibold headers, normal body text
          - Spacing: gap-4 (16px) between cards, gap-6 (24px) between sections
          - Accessibility: ARIA labels, keyboard navigation, color contrast WCAG AA
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/lib/repositories/flareRepository.ts</path>
        <kind>repository</kind>
        <symbol>flareRepository.getActiveFlaresWithTrend</symbol>
        <lines>205-246</lines>
        <reason>Primary data source for ActiveFlareCards - returns active flares with trend indicators (worsening/stable/improving) calculated from 24h severity changes</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/flareRepository.ts</path>
        <kind>repository</kind>
        <symbol>flareRepository.resolve</symbol>
        <lines>186-199</lines>
        <reason>Called by [Resolve] button to mark flare as resolved with optional resolution notes</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/flareRepository.ts</path>
        <kind>repository</kind>
        <symbol>flareRepository.updateSeverity</symbol>
        <lines>105-150</lines>
        <reason>Used for severity updates with automatic status detection and severity history tracking</reason>
      </artifact>
      <artifact>
        <path>src/lib/types/flare.ts</path>
        <kind>type-definition</kind>
        <symbol>ActiveFlare</symbol>
        <lines>1-16</lines>
        <reason>Core data structure for flare objects with severity, status, bodyRegions, interventions, severityHistory</reason>
      </artifact>
      <artifact>
        <path>src/components/flare/FlareCard.tsx</path>
        <kind>component</kind>
        <symbol>FlareCard</symbol>
        <lines>1-109</lines>
        <reason>Existing FlareCard component showing pattern for displaying individual flare with status buttons, severity visualization, body regions. Reuse design patterns and styling.</reason>
      </artifact>
      <artifact>
        <path>src/components/flare/ActiveFlareDashboard.tsx</path>
        <kind>component</kind>
        <symbol>ActiveFlareDashboard</symbol>
        <lines>1-50</lines>
        <reason>Reference for dashboard layout pattern, grid structure, and how to integrate multiple flare cards</reason>
      </artifact>
    </code>
    <dependencies>
      <ecosystem name="node">
        <package name="react" version="^19.0.0">Core React library for component creation</package>
        <package name="react-dom" version="^19.0.0">React DOM rendering</package>
        <package name="next" version="^15.0.0">Next.js framework for routing and SSR</package>
        <package name="typescript" version="^5.0.0">TypeScript for type safety</package>
        <package name="lucide-react" version="latest">Icon library for UI icons (arrows, map, etc)</package>
        <package name="tailwindcss" version="^4.0.0">CSS framework for styling</package>
        <package name="dexie" version="^4.0.0">IndexedDB wrapper for data persistence</package>
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">
      Follow established component patterns from existing FlareCard and ActiveFlareDashboard components.
      Use functional React components with hooks (useState, useEffect).
      Components must be client-side ("use client" directive for Next.js 15).
    </constraint>
    <constraint type="data-layer">
      All data access must go through flareRepository - no direct database calls.
      Use getActiveFlaresWithTrend() method which returns flares with pre-calculated trend indicators.
      Handle loading and error states gracefully.
    </constraint>
    <constraint type="ui-patterns">
      Maintain visual consistency with existing FlareCard component design.
      Use Tailwind CSS utility classes for styling (no custom CSS files).
      Status colors: active=yellow, improving=green, worsening=red, resolved=blue.
      Trend arrows: ↑ (U+2191), → (U+2192), ↓ (U+2193) with matching colors.
    </constraint>
    <constraint type="accessibility">
      WCAG 2.1 AA compliance required.
      All interactive elements must have ARIA labels.
      Keyboard navigation support (Tab, Enter, Escape).
      Color-blind safe design (don't rely on color alone).
      Minimum 4.5:1 text contrast ratio.
    </constraint>
    <constraint type="mobile-responsive">
      Mobile-first design approach.
      Breakpoints: sm(640px), md(768px), lg(1024px).
      Touch targets minimum 44x44px.
      Cards stack vertically on mobile, grid layout on desktop.
    </constraint>
    <constraint type="performance">
      Component should handle 5+ active flares without performance degradation.
      Use React.memo for card components to prevent unnecessary re-renders.
      Debounce sort/filter operations if needed.
    </constraint>
    <constraint type="modals">
      FlareUpdateModal component is referenced but will be created in Story 2.4.
      For this story, prepare modal trigger but use placeholder/TODO if modal doesn't exist yet.
      Confirmation dialog for resolve action can use native confirm() as temporary solution.
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>flareRepository.getActiveFlaresWithTrend</name>
      <kind>repository-method</kind>
      <signature>async getActiveFlaresWithTrend(userId: string): Promise&lt;Array&lt;ActiveFlare &amp; { trend: 'worsening' | 'stable' | 'improving' }&gt;&gt;</signature>
      <path>src/lib/repositories/flareRepository.ts:205-246</path>
      <usage>Primary data source - fetches active flares with trend indicators pre-calculated from severity history</usage>
    </interface>
    <interface>
      <name>flareRepository.resolve</name>
      <kind>repository-method</kind>
      <signature>async resolve(id: string, resolutionNotes?: string): Promise&lt;void&gt;</signature>
      <path>src/lib/repositories/flareRepository.ts:186-199</path>
      <usage>Called when user clicks [Resolve] button to mark flare as resolved</usage>
    </interface>
    <interface>
      <name>ActiveFlare</name>
      <kind>type-interface</kind>
      <signature>interface ActiveFlare { id: string; userId: string; symptomId: string; symptomName: string; startDate: Date; endDate?: Date; severity: number; bodyRegions: string[]; status: "active" | "improving" | "worsening" | "resolved"; interventions: FlareIntervention[]; notes: string; photoIds: string[]; createdAt: Date; updatedAt: Date; }</signature>
      <path>src/lib/types/flare.ts:1-16</path>
      <usage>Core data structure for flare objects - component props and state typing</usage>
    </interface>
    <interface>
      <name>FlareCard</name>
      <kind>react-component</kind>
      <signature>interface FlareCardProps { flare: ActiveFlare; onUpdate: () =&gt; void; }</signature>
      <path>src/components/flare/FlareCard.tsx:8-11</path>
      <usage>Existing card component - reference for design patterns, styling, and card structure</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing framework: Jest 30.2.0 with React Testing Library.
      Coverage target: 80%+ for all new components.
      Test files co-located with components: __tests__/ComponentName.test.tsx
      Test user behavior, not implementation details.
      Mock repository methods using Jest mocks.
      Use data-testid for complex selectors when needed.
    </standards>
    <locations>
      <location>src/components/flares/__tests__/ActiveFlareCards.test.tsx</location>
      <location>src/lib/repositories/__tests__/flareRepository.enhanced.test.ts (existing, may need updates)</location>
    </locations>
    <ideas>
      <testIdea criterion="1">Test: Renders 0-5 flare cards correctly. Mock getActiveFlaresWithTrend to return 0, 1, 3, and 5 flares. Verify correct number of cards rendered.</testIdea>
      <testIdea criterion="2">Test: Each card displays all required information (body location, duration, severity, trend arrow). Verify text content and data-testid attributes.</testIdea>
      <testIdea criterion="3">Test: Quick action buttons exist and are clickable. Simulate clicks on [Update] and [Resolve] buttons, verify handlers called.</testIdea>
      <testIdea criterion="4">Test: Empty state shown when no active flares. Mock repository to return empty array, verify empty state message displayed.</testIdea>
      <testIdea criterion="5">Test: Trend arrows render with correct colors. Mock flares with different trends (worsening/stable/improving), verify arrow symbols and colors.</testIdea>
      <testIdea criterion="6">Test: Duration calculation is correct. Mock flares with various startDate values, verify "Day X" format displayed.</testIdea>
      <testIdea criterion="7">Test: [Update] button opens modal (once implemented). Verify modal open handler called with correct flare data.</testIdea>
      <testIdea criterion="8">Test: [Resolve] button shows confirmation and calls resolve(). Mock window.confirm, simulate resolve click, verify repository.resolve() called.</testIdea>
      <testIdea criterion="9">Test: Sorting functionality works correctly. Test sort by severity (descending) and sort by recency. Verify card order changes.</testIdea>
      <testIdea criterion="loading">Test: Loading state displays skeleton or spinner. Mock repository promise delay, verify loading indicator shown.</testIdea>
      <testIdea criterion="error">Test: Error state displays error message. Mock repository to throw error, verify error message displayed.</testIdea>
    </ideas>
  </tests>
</story-context>
