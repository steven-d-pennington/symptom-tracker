<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.3</storyId>
    <title>Timeline View Component</title>
    <status>Ready</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>C:\projects\symptom-tracker\docs\stories\story-2.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>user wanting to see what happened today</asA>
    <iWant>to view a chronological feed of all events</iWant>
    <soThat>I can understand my day's health patterns at a glance</soThat>
    <tasks>
      <task id="1" complete="false">
        <description>Create TimelineView component (AC: 1,2,3,9)</description>
        <subtasks>
          <subtask>Set up component file `src/components/timeline/TimelineView.tsx`</subtask>
          <subtask>Query all event types from repositories (medicationEvents, triggerEvents, symptomInstances, flares)</subtask>
          <subtask>Aggregate and sort events by timestamp descending</subtask>
          <subtask>Group events by day with date headers ("Today", "Yesterday", "Oct 12")</subtask>
          <subtask>Implement responsive width (full on mobile, 2/3 on desktop)</subtask>
        </subtasks>
      </task>
      <task id="2" complete="false">
        <description>Format timeline items (AC: 2)</description>
        <subtasks>
          <subtask>Medication: "üíä Humira (taken)" or "üíä Metformin (skipped)"</subtask>
          <subtask>Symptom: "üò£ Headache" with severity if present</subtask>
          <subtask>Trigger: "‚ö†Ô∏è Ate dairy (medium intensity)"</subtask>
          <subtask>Flare created: "üî• Right armpit flare started, severity 7/10"</subtask>
          <subtask>Flare updated: "üî• Right armpit updated: 8/10 (+1)"</subtask>
          <subtask>Flare resolved: "üî• Right armpit flare resolved"</subtask>
        </subtasks>
      </task>
      <task id="3" complete="false">
        <description>Implement interactivity (AC: 4,5,6)</description>
        <subtasks>
          <subtask>Tap timeline item opens EventDetailModal (Story 2.6)</subtask>
          <subtask>Show "Add details ‚Üí" link for minimal events</subtask>
          <subtask>Add "Load previous day" button with pagination</subtask>
          <subtask>Track currentDate state for pagination</subtask>
        </subtasks>
      </task>
      <task id="4" complete="false">
        <description>Add loading and empty states (AC: 7,8)</description>
        <subtasks>
          <subtask>Skeleton UI while initial query loads</subtask>
          <subtask>Spinner for "Load more" action</subtask>
          <subtask>Empty state message: "No events today yet. Use quick-log buttons above to get started!"</subtask>
        </subtasks>
      </task>
      <task id="5" complete="false">
        <description>Optimize for performance (AC: Performance)</description>
        <subtasks>
          <subtask>Use pagination: load 1 day at a time</subtask>
          <subtask>Consider virtualization for 100+ events (react-window or similar)</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Displays events in reverse chronological order (most recent first)</criterion>
    <criterion id="2">Each timeline item shows: time (HH:MM am/pm), emoji icon, summary text, optional details preview</criterion>
    <criterion id="3">Events grouped by day with date headers ("Today", "Yesterday", "Oct 12", etc.)</criterion>
    <criterion id="4">Tap timeline item to open EventDetailModal for that event</criterion>
    <criterion id="5">"Add details ‚Üí" link shown on events with minimal data</criterion>
    <criterion id="6">"Load previous day" button at bottom, loads one more day on tap</criterion>
    <criterion id="7">Loading states: skeleton UI while querying, spinner for "Load more"</criterion>
    <criterion id="8">Empty state: "No events today yet. Use quick-log buttons above to get started!"</criterion>
    <criterion id="9">Responsive: full width on mobile, 2/3 width on desktop</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/event-stream-redesign-spec.md</path>
        <title>Event Stream Redesign Technical Specification</title>
        <section>Component Architecture - TimelineView</section>
        <snippet>
          TimelineView component specification (lines 236-258):
          - Location: src/components/timeline/TimelineView.tsx
          - Purpose: Chronological feed of today's events
          - TimelineEvent interface: {id, type ('medication'|'symptom'|'trigger'|'flare'|'photo'), timestamp, summary, details?}
          - Props: events[], onEventTap, onAddDetails
          - Features: Chronological list, tap to expand, "Add details" button for quick-logged items
          - Aggregates events from all repositories (medication, trigger, symptom, flare)
        </snippet>
      </doc>
      <doc>
        <path>docs/PRODUCT/event-stream-redesign-epics.md</path>
        <title>Event Stream Redesign Epics</title>
        <section>Story 2.3: Timeline View Component</section>
        <snippet>
          Story defines requirements for TimelineView:
          - Display events in reverse chronological order
          - Group by day with date headers ("Today", "Yesterday", "Oct 12")
          - Each item: time (HH:MM am/pm), emoji icon, summary text, optional details preview
          - Tap to open EventDetailModal
          - "Add details ‚Üí" link for minimal events
          - "Load previous day" button for pagination
          - Empty state and loading states
          - Responsive: full width mobile, 2/3 desktop
        </snippet>
      </doc>
      <doc>
        <path>docs/DEVELOPMENT/component-library.md</path>
        <title>Component Library Reference</title>
        <section>Calendar Components - TimelineView</section>
        <snippet>
          Existing timeline/calendar components for reference:
          - TimelineView: Horizontal timeline of events with zoom controls
          - CalendarView: Main calendar page with month/week/day views
          - DayView: Detailed view of single day's entry
          - Design patterns: Timeline markers, event grouping, responsive layouts
          - Related components in src/components/calendar/
        </snippet>
      </doc>
      <doc>
        <path>docs/PRODUCT/ux-specification.md</path>
        <title>UX/UI Specification</title>
        <section>Component Library - Timeline &amp; List Components</section>
        <snippet>
          UX patterns for timeline displays:
          - Reverse chronological order (most recent first)
          - Day grouping with relative dates ("Today", "Yesterday")
          - Loading states: skeleton UI, progressive loading
          - Empty states with helpful guidance messages
          - Touch-friendly interactions (tap to expand)
          - Responsive breakpoints: full width mobile, constrained desktop
          - Accessibility: keyboard navigation, screen reader support
        </snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>src/lib/repositories/medicationEventRepository.ts</path>
        <kind>repository</kind>
        <symbol>medicationEventRepository.findByDateRange</symbol>
        <lines>104-114</lines>
        <reason>Primary method for querying medication events by date range - essential for timeline aggregation. Uses optimized [userId+timestamp] compound index.</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/medicationEventRepository.ts</path>
        <kind>repository</kind>
        <symbol>medicationEventRepository.getTodayEvents</symbol>
        <lines>303-314</lines>
        <reason>Helper method to get today's medication events - useful pattern for timeline queries</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/triggerEventRepository.ts</path>
        <kind>repository</kind>
        <symbol>triggerEventRepository.findByDateRange</symbol>
        <lines>1-50</lines>
        <reason>Query trigger events by date range for timeline - parallel to medicationEventRepository pattern</reason>
      </artifact>
      <artifact>
        <path>src/lib/repositories/flareRepository.ts</path>
        <kind>repository</kind>
        <symbol>flareRepository.getActiveFlaresWithTrend</symbol>
        <lines>205-246</lines>
        <reason>Get active flares with trend indicators - needed for timeline flare events display</reason>
      </artifact>
      <artifact>
        <path>src/lib/db/schema.ts</path>
        <kind>type-definition</kind>
        <symbol>MedicationEventRecord</symbol>
        <lines>1-20</lines>
        <reason>Core type for medication events - defines timestamp, userId, medicationId fields used in timeline aggregation</reason>
      </artifact>
      <artifact>
        <path>src/lib/db/schema.ts</path>
        <kind>type-definition</kind>
        <symbol>TriggerEventRecord</symbol>
        <lines>1-20</lines>
        <reason>Core type for trigger events - parallel structure to medication events for timeline</reason>
      </artifact>
      <artifact>
        <path>src/components/calendar/TimelineView.tsx</path>
        <kind>component</kind>
        <symbol>TimelineView</symbol>
        <lines>1-50</lines>
        <reason>EXISTING timeline component - reference for design patterns, may need refactoring or replacement for new event stream timeline</reason>
      </artifact>
    </code>
    <dependencies>
      <ecosystem name="node">
        <package name="react" version="^19.0.0">Core React library for component creation</package>
        <package name="react-dom" version="^19.0.0">React DOM rendering</package>
        <package name="next" version="^15.0.0">Next.js framework for routing and SSR</package>
        <package name="typescript" version="^5.0.0">TypeScript for type safety</package>
        <package name="lucide-react" version="latest">Icon library for UI icons (emoji alternatives, arrows)</package>
        <package name="tailwindcss" version="^4.0.0">CSS framework for styling</package>
        <package name="dexie" version="^4.0.0">IndexedDB wrapper for data persistence</package>
        <package name="date-fns" version="latest">Date formatting and manipulation (optional, can use Intl.DateTimeFormat)</package>
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint type="architecture">
      Create new timeline component at src/components/timeline/TimelineView.tsx.
      NOTE: An older timeline component exists at src/components/calendar/TimelineView.tsx - this is for a different use case (horizontal zoom/pan timeline).
      The new TimelineView is a vertical chronological feed for the event stream model.
      Use functional React components with hooks (useState, useEffect).
      Components must be client-side ("use client" directive for Next.js 15).
    </constraint>
    <constraint type="data-aggregation">
      Query all event types in parallel for performance:
      - medicationEventRepository.findByDateRange(userId, startTimestamp, endTimestamp)
      - triggerEventRepository.findByDateRange(userId, startTimestamp, endTimestamp)
      - flareRepository.getActiveFlaresWithTrend(userId) - for flare creation/update events
      - Future: symptomInstances (not in this story scope)
      Merge results into unified TimelineEvent[] array sorted by timestamp DESC.
    </constraint>
    <constraint type="timeline-event-interface">
      Define TimelineEvent interface with fields: {id, type, timestamp, summary, details?, eventRef}.
      Event types: 'medication' | 'symptom' | 'trigger' | 'flare-created' | 'flare-updated' | 'flare-resolved'
      Summary format examples per spec (lines 30-38 of story):
      - Medication: "üíä Humira (taken)" or "üíä Metformin (skipped)"
      - Symptom: "üò£ Headache" (with optional severity)
      - Trigger: "‚ö†Ô∏è Ate dairy (medium intensity)"
      - Flare: "üî• Right armpit flare started, severity 7/10"
    </constraint>
    <constraint type="date-grouping">
      Group events by day with headers using relative dates:
      - Same day as today: "Today"
      - Yesterday: "Yesterday"
      - Within week: Day name ("Monday", "Tuesday")
      - Older: Short date ("Oct 12", "Sep 5")
      Use Intl.DateTimeFormat or date-fns for formatting.
    </constraint>
    <constraint type="pagination">
      Initially load today's events only (AC: 6).
      "Load previous day" button at bottom loads one additional day.
      Track currentDate state (starts at today, decrements by 1 day on load more).
      Prevent loading duplicate days.
    </constraint>
    <constraint type="progressive-disclosure">
      EventDetailModal component is defined in Story 2.6 (not yet implemented).
      For this story, prepare onClick handler but use placeholder/TODO comment if modal doesn't exist.
      "Add details ‚Üí" link should be shown for events with minimal data (no notes/details).
    </constraint>
    <constraint type="ui-patterns">
      Use Tailwind CSS utility classes for styling.
      Responsive width: w-full md:w-2/3 (full mobile, 2/3 desktop).
      Loading states: Skeleton UI during initial load, spinner for "Load more".
      Empty state: Friendly message with guidance to use quick-log buttons.
      Time format: HH:MM am/pm using Intl.DateTimeFormat or date-fns.
    </constraint>
    <constraint type="accessibility">
      WCAG 2.1 AA compliance required.
      All timeline items must be keyboard accessible (Tab, Enter).
      ARIA labels for event types and actions.
      Screen reader announcements for loading states.
      Minimum 4.5:1 text contrast ratio.
    </constraint>
    <constraint type="performance">
      Use React.memo for timeline item components to prevent unnecessary re-renders.
      Consider virtualization (react-window) if timeline exceeds 100 events (AC: Performance).
      Optimize queries with compound indexes [userId+timestamp].
      Debounce "Load more" button to prevent rapid clicks.
    </constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>TimelineEvent</name>
      <kind>type-interface</kind>
      <signature>interface TimelineEvent { id: string; type: 'medication' | 'symptom' | 'trigger' | 'flare-created' | 'flare-updated' | 'flare-resolved'; timestamp: number; summary: string; details?: any; eventRef: any; }</signature>
      <path>src/components/timeline/TimelineView.tsx (to be created)</path>
      <usage>Unified event type for timeline display - aggregates all event types into single sortable array</usage>
    </interface>
    <interface>
      <name>medicationEventRepository.findByDateRange</name>
      <kind>repository-method</kind>
      <signature>async findByDateRange(userId: string, startTimestamp: number, endTimestamp: number): Promise&lt;MedicationEventRecord[]&gt;</signature>
      <path>src/lib/repositories/medicationEventRepository.ts:104-114</path>
      <usage>Query medication events for timeline by date range using optimized compound index</usage>
    </interface>
    <interface>
      <name>triggerEventRepository.findByDateRange</name>
      <kind>repository-method</kind>
      <signature>async findByDateRange(userId: string, startTimestamp: number, endTimestamp: number): Promise&lt;TriggerEventRecord[]&gt;</signature>
      <path>src/lib/repositories/triggerEventRepository.ts</path>
      <usage>Query trigger events for timeline - parallel to medication pattern</usage>
    </interface>
    <interface>
      <name>flareRepository.getActiveFlaresWithTrend</name>
      <kind>repository-method</kind>
      <signature>async getActiveFlaresWithTrend(userId: string): Promise&lt;Array&lt;ActiveFlare &amp; { trend: 'worsening' | 'stable' | 'improving' }&gt;&gt;</signature>
      <path>src/lib/repositories/flareRepository.ts:205-246</path>
      <usage>Get active flares with severity history for timeline flare events (creation, updates, resolution)</usage>
    </interface>
    <interface>
      <name>MedicationEventRecord</name>
      <kind>type-interface</kind>
      <signature>interface MedicationEventRecord { id: string; userId: string; medicationId: string; timestamp: number; taken: boolean; dosage?: string; notes?: string; timingWarning?: 'early' | 'late' | null; createdAt: number; updatedAt: number; }</signature>
      <path>src/lib/db/schema.ts</path>
      <usage>Type definition for medication events - used in timeline aggregation</usage>
    </interface>
    <interface>
      <name>TriggerEventRecord</name>
      <kind>type-interface</kind>
      <signature>interface TriggerEventRecord { id: string; userId: string; triggerId: string; timestamp: number; intensity: 'low' | 'medium' | 'high'; notes?: string; createdAt: number; updatedAt: number; }</signature>
      <path>src/lib/db/schema.ts</path>
      <usage>Type definition for trigger events - parallel to medication for timeline</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing framework: Jest 30.2.0 with React Testing Library.
      Coverage target: 80%+ for all new components.
      Test files co-located: __tests__/ComponentName.test.tsx
      Test user behavior, not implementation details.
      Mock repository methods using Jest mocks.
      Use data-testid for complex selectors when needed.
    </standards>
    <locations>
      <location>src/components/timeline/__tests__/TimelineView.test.tsx</location>
      <location>src/lib/repositories/__tests__/medicationEventRepository.test.ts (existing)</location>
      <location>src/lib/repositories/__tests__/triggerEventRepository.test.ts (existing)</location>
    </locations>
    <ideas>
      <testIdea criterion="1">Test: Events displayed in reverse chronological order. Mock multiple events with different timestamps, verify newest first.</testIdea>
      <testIdea criterion="2">Test: Timeline item formatting. Mock each event type (medication, trigger, flare), verify correct emoji, time, summary text displayed.</testIdea>
      <testIdea criterion="3">Test: Day grouping headers. Mock events across multiple days, verify "Today", "Yesterday", date headers displayed correctly.</testIdea>
      <testIdea criterion="4">Test: Event tap opens modal. Simulate click on timeline item, verify onEventTap handler called with correct eventId (placeholder until EventDetailModal exists).</testIdea>
      <testIdea criterion="5">Test: "Add details ‚Üí" link shown for minimal events. Mock events with/without notes, verify link only shown for events without details.</testIdea>
      <testIdea criterion="6">Test: "Load previous day" pagination. Mock repository to return events, simulate "Load more" click, verify additional day queried and displayed.</testIdea>
      <testIdea criterion="7">Test: Loading states. Mock delayed repository response, verify skeleton UI shown initially, spinner shown during "Load more".</testIdea>
      <testIdea criterion="8">Test: Empty state. Mock repository to return empty array, verify empty state message displayed.</testIdea>
      <testIdea criterion="9">Test: Responsive width classes. Verify component has w-full and md:w-2/3 classes applied.</testIdea>
      <testIdea criterion="aggregation">Test: Event aggregation from multiple repositories. Mock all repositories (medication, trigger, flare), verify events merged and sorted by timestamp.</testIdea>
      <testIdea criterion="error">Test: Repository error handling. Mock repository to throw error, verify error message displayed to user.</testIdea>
    </ideas>
  </tests>
</story-context>
