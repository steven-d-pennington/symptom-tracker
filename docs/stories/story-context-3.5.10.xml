<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3.5</epicId>
    <storyId>10</storyId>
    <title>CRITICAL: Calendar page crashes on loading data</title>
    <status>Draft</status>
    <generatedAt>2025-10-31</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-3.5.10.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a user</asA>
    <iWant>to view the calendar without the application crashing</iWant>
    <soThat>I can review my historical data</soThat>
    <tasks>
        - [ ] Task 1 (AC: #1, #3): Modify `recordToSymptom` in `src/lib/repositories/symptomInstanceRepository.ts` to add a conditional check for `record.severityScale` before parsing.
        - [ ] Task 2 (AC: #2): Add a unit test to a relevant test file to verify that `recordToSymptom` correctly handles a record with an undefined `severityScale`.
        - [ ] Task 3 (AC: #1): Manually test the `/calendar` page with a mix of old and new data to confirm the fix.
    </tasks>
  </story>

  <acceptanceCriteria>
    1. The `/calendar` page loads and displays successfully, even with symptom records that have an undefined `severityScale`.
    2. The application does not throw a `SyntaxError: "undefined" is not valid JSON` error during data loading.
    3. The `recordToSymptom` function in `symptomInstanceRepository.ts` includes a check to ensure `severityScale` is not `undefined` before attempting to parse it.
  </acceptanceCriteria>

  <artifacts>
    <docs>
        <doc path="docs/stories/story-3.5.10.md" title="Source Story" section="all" snippet="The source story file containing the bug report, ACs, and tasks." />
        <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Repository and Service Architecture" snippet="Describes the repository pattern that symptomInstanceRepository is part of." />
        <doc path="docs/epics.md" title="Epics" section="Epic 3.5" snippet="Describes the epic this bug belongs to." />
    </docs>
    <code>
        <artifact path="src/lib/repositories/symptomInstanceRepository.ts" kind="repository" symbol="recordToSymptom" lines="10-16" reason="This function contains the bug. It calls JSON.parse() on record.severityScale without checking if it is undefined." />
        <artifact path="src/lib/db/schema.ts" kind="schema" symbol="SymptomInstanceRecord" lines="90-103" reason="This is the type definition for the data record being processed. It defines severityScale as a string." />
    </code>
    <dependencies>
        <dependency name="dexie" version="^4.2.0" reason="IndexedDB wrapper used by the repository layer." />
        <dependency name="jest" version="^30.2.0" reason="Testing framework for unit tests." />
        <dependency name="@testing-library/react" version="^16.3.0" reason="Testing utility for React components." />
        <dependency name="fake-indexeddb" version="^6.2.4" reason="Used for mocking IndexedDB in tests." />
    </dependencies>
  </artifacts>

  <constraints>
    <constraint>The fix should be a conditional check, similar to how `triggers` and `photos` are handled in the same function.</constraint>
    <constraint>A new unit test file must be created for the repository if one does not exist.</constraint>
  </constraints>
  <interfaces />
  <tests>
    <standards>Project uses Jest with React Testing Library. Tests are located in `__tests__` subdirectories. IndexedDB is mocked using `fake-indexeddb`.</standards>
    <locations>
        <location>src/lib/repositories/__tests__/symptomInstanceRepository.test.ts (NEW FILE)</location>
    </locations>
    <ideas>
        <idea ac="2">Create a test case that calls `recordToSymptom` with a `SymptomInstanceRecord` object where `severityScale` is undefined.</idea>
        <idea ac="1">Create a test case that calls `getAll` or a similar method with a mocked database containing one record with an undefined `severityScale` and one with a valid one, and assert that it does not throw and returns the correct data.</idea>
    </ideas>
  </tests>
</story-context>